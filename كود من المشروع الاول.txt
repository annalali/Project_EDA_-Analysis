#vcs= df.price.value_counts()
#plt.figure(figsize = [13,4])
#price_x = df['price'] 
#y_axis =df['price'].value_counts()

plt.figure(figsize = [13,4])
#df.states.value_counts().plot.bar( color='b') #.plot(kind='bar', color='b');
#highest_sport = df['price'].value_counts().index
#sns.countplot(x='price', order=highest_sport)
plt.xticks(rotation=75)
plt.xlabel('Price', family='fantasy', fontsize = 13, color='#931406')
plt.ylabel('Number of repetitions', family='fantasy', fontsize = 13, weight = 'light',color= '#931406') #'#FA8072'
plt.title('Prices', family='fantasy',fontsize = 20 ,loc='center',color='#f84d3a')
plt.plot(df['price'], color= 'mediumvioletred') # '#ff1a66' 
plt.show();
--------------------------------------------------------------
#color_agg =df.color.agg(['max', 'mean', 'min'])
#print(color_agg)
# max    yellow
# min     beige
#Name: color, dtype: object
--------------------------------------------------------
# df.color.value_counts() == white 
#.agg(['max', 'mean', 'min']).plot.pie()
----------------------------------------------------
#save_df=df.sort_values(by=['color'],ascending=False) #.max()
#save_df[['color','brand','state']]
-----------------------------------------------------
# df.brand.value_counts()
# df.model.value_counts()
# df.loc[(df.model == '1500') | (df.model == 'f-150')|(df.model == '3500'), ['model']].value_counts()
# df.iloc[: , 2].value_counts()
------------------------------------
#(df.groupby(['brand','state']).sort_values(['priceBinncd' == High ], ascending= False))
---------------------------------------------
#df.hist(figsize=(18,14))
#plt.show()
#----------------------
# tips_df
#tips_df = sns.load_dataset('df')
---------------------------------
#def price_cat(p):
 #   if p < 26:
  #      return "LOW(0-25)"
   # elif p < 19091:
    #    return"Medium(26-19090)"
    #elif p < 84901:
     #   return"High(19091-84900)"
    #else:
     #   return"84900+"
-----------------------------------------
year_con = df.year.agg(['max', 'mean','min'])
year_con
#mean(df.year)

names='2020','2016','1973',
values=[48,203,1]

# Create a set of colors
colors = ['#4F6272', '#B7C3F3', '#DD7596', '#8EB897']

# Use it thanks to the color argument
plt.pie(values, labels=names, labeldistance=1.15, 
        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'white' }, colors=colors);
-----------------------------------------------------
#year_max = max(df.year)
#list(df.year.value_counts())
#list(df.year.unique())
--------------------------------------------
plt.figure(figsize=[8,8])

year_value= df['year'].value_counts().index
#year_uniqu= df.year.unique()
year_list= list(df.year.value_counts())
year_uniqu_1= list(df.year.unique())
# Reorder it following the values:
#ordered_df = df.sort_values(by='values')
my_range=range(1,len(df.index)+1)

year_1= df['year']  #people = ('Tom', 'Dick', 'Harry', 'Slim', 'Jim')
y_pos = np.arange(len(year_1))
performance = 3 + 10 * np.random.rand(len(year_1))
error = np.random.rand(len(year_1))

fig, ax = plt.subplots()

hbars = ax.barh(y_pos, performance, xerr=error, align='center')
ax.set_yticks(y_pos, labels =my_range)
ax.invert_yaxis()  # labels read top-to-bottom
ax.set_xlabel('Performance')
ax.set_title('How fast do you want to go today?')

# Label with specially formatted floats
ax.bar_label(hbars, fmt='%.2f')
ax.set_xlim(right=30)  # adjust xlim to fit labels

plt.show()
------------------------------------------------------------------
####
# stat_value_counts_agg = df.states.value_counts().agg(['max', 'mean', 'min'])
# print(stat_value_counts_agg)
# print('\n')
------------------------------------------------------------------
# تحديد اللون الابيض فقط 
qwe = df.groupby('color').get_group('white')
#كل ولاية كم عدد البرانادت اللي موجوه فيها
#asdf = df.groupby('state')['brand'].count()
#asdf = asdf.reset_index().sort_values('brand', ascending=False)
#asdf 

#qazx= df[df.color == 'white'].groupby(['state','brand']).count().reset_index().sort_values('state', ascending=False)
#qazx
#qww= df[df.color == 'white'].groupby(['state']).brand.value_counts()
#qww



#asdf = df.groupby('state')['brand'].count().reset_index().sort_values('brand', ascending=False)
#asdf = asdf.df.groupby('color').get_group('white')
#asdf
####################################################
#qwe = df.groupby('color').get_group('white')
#asdf = df.groupby('brand')['state'].count()
#asdf = asdf.reset_index().sort_values('state', ascending=False)
#asdf
------------------------------------------------------------------------------
#
white1 =df[df.color == 'white']
whiteb = df.loc[df.color == 'white', ['brand']]
def white_brand1 (w):
    if w == white1 and whiteb:
        return True
    else:
        return False
    
#df.color.apply(white_brand1)
df.color.apply(white_brand1("ford-door"))
------------------------------------------------------
#asdf = df.groupby('state')['brand'].count()
#asdf = asdf.reset_index().sort_values('brand', ascending=False)

#df[df.color == 'white'].groupby('state')['brand'].count().reset_index().sort_values('brand', ascending=False)
#df.groupby('state')['brand'].count().reset_index().sort_values('brand', ascending=False)
------------------------------------------------

plt.figure(figsize=[10,6])
year_1= df['year'] 
year_value= df['year'].value_counts().index

year_list= list(df.year.value_counts())
year_uniqu_1= list(df.year.unique())
my_range=range(1,len(df.index)+1)
sns.countplot(data=df, y='year', order=year_value)
plt.title('Model year', family='fantasy',fontsize = 19 ,loc='center',color='k')
plt.xlabel('Count',family='fantasy', fontsize = 16, weight = 'light',color= 'k')
plt.ylabel('Years', family='fantasy', fontsize = 16, weight = 'light',color= 'k');
----------------------------------------------------------------------------------------
#price and year
#dff = df.groupby(['price','year'], as_index=False).first()
#dff 
dd1= df[df.year.between(2019,2020)].groupby('price')#.count().reset_index().sort_values(by='price', ascending=False)
dd1
-------------------------------------------------------------
#!pip install plotly matplotlib seaborn --quiet
import plotly.express as px
# df.groupby('brand').count()
white_brand1 = df.groupby('color')['brand'].count()
white_brand1 =white_brand1.reset_index().sort_values('brand', ascending=False)
fig = px.bar(white_brand1, x='color', y='brand', color='brand')
fig.show()
---------------------------------------
df.groupby('brand')['price'].value_counts()
------------------------------
# The most common brand in each stat
comm_brand_each_state= (df.groupby(['state','brand']).count().sort_values(['brand'], ascending=False))
comm_brand_each_state
----------------------------------
brand_count = df['brand'].value_counts().to_frame().reset_index()
brand_count.rename(columns={'index':'brand', 'brand':'count'}, inplace=True)
brand_count['percentages'] = brand_count['count']/sum(brand_count['count'])*100

fig = plt.figure(figsize=(10, 8))

#axes = fig.add_axes([0, 0, 1, 1])

sns.barplot(y = brand_count['brand'], x = brand_count['count'], color = '#50c878')

plt.yticks(color='black', fontsize=9)
plt.xticks([])

axes.set_xlabel('')
axes.set_ylabel('')

axes.spines[['right', 'top', 'bottom']].set_visible(False)

for p in axes.patches:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy() 
    axes.annotate('{:.0f}'.format(width), (50+ width, y + height*0.8), ha='center', fontsize=16, color='black')

axes.axhline(4.51, linestyle = ':', color = 'goldenrod', xmin = 0, xmax = 1220, lw=4)

axes.text(700, 2.5, 
          f'''Top 5 brands by count - 
{round(sum(brand_count['percentages'][:5]),2)}% of the total''', 
          fontweight='bold', color='black', fontsize=16)
axes.text(-300, -2.2, 'Number of cars by brand', color='black', fontsize=24, fontweight='bold')
    
fig.show()





































